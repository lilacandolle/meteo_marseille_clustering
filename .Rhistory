select(date) %>%
write_csv("data/processed/jours_vent_faible_matin_LCP.csv")
df_vent_faible %>%
filter(mean_ws_soir < 4) %>%
select(date) %>%
write_csv("data/processed/jours_vent_faible_soir_LCP.csv")
# on crée un dataset avec les 3
df_meteoCO2 <- ERA5land %>%
select (date, flag_dn, saison, windu, windv, ws, wd, t2m, ssrd, surfacepressure, totalprecipitation) %>%
left_join(CO2, by = "date") %>%
mutate(saison = factor(saison, levels = c("DJF", "MAM", "JJA", "SON"))) %>% # pour ERA5 on joint que ablh et relative humidity
left_join(ERA5 %>% select(date, relative_humidity, ablh), by = "date")
# on print le nombre de jours où on a CO2_dry_corr_cal
# on filtre les valeurs manquantes
df_meteoCO2 <- df_meteoCO2 %>%
filter(!is.na(windu) & !is.na(windv) & !is.na(ws) & !is.na(wd) & !is.na(t2m) &
!is.na(ssrd) & !is.na(surfacepressure) & !is.na(relative_humidity) &
!is.na(ablh) & !is.na(CO2_dry_corr_cal))
# on crée un dataset avec les 3
df_meteoCO2 <- ERA5land %>%
select (date, flag_dn, saison, windu, windv, ws, wd, t2m, ssrd, surfacepressure, totalprecipitation) %>%
left_join(CO2, by = "date") %>%
mutate(saison = factor(saison, levels = c("DJF", "MAM", "JJA", "SON"))) %>% # pour ERA5 on joint que ablh et relative humidity
left_join(ERA5 %>% select(date, relative_humidity, ablh), by = "date")
cat("Nombre de jours avec CO2_dry_corr_cal :", nrow(df_meteoCO2 %>% filter(!is.na(CO2_dry_corr_cal))), "\n")
# on filtre les valeurs manquantes
df_meteoCO2 <- df_meteoCO2 %>%
filter(!is.na(windu) & !is.na(windv) & !is.na(ws) & !is.na(wd) & !is.na(t2m) &
!is.na(ssrd) & !is.na(surfacepressure) & !is.na(relative_humidity) &
!is.na(ablh) & !is.na(CO2_dry_corr_cal))
# on crée un dataset avec les 3
df_meteoCO2 <- ERA5land %>%
select (date, flag_dn, saison, windu, windv, ws, wd, t2m, ssrd, surfacepressure, totalprecipitation) %>%
left_join(CO2, by = "date") %>%
mutate(saison = factor(saison, levels = c("DJF", "MAM", "JJA", "SON"))) %>% # pour ERA5 on joint que ablh et relative humidity
left_join(ERA5 %>% select(date, relative_humidity, ablh), by = "date")
saveRDS(df_meteoCO2, "data/processed/df_meteoCO2_LCP.rds")
# on filtre les valeurs manquantes
df_meteoCO2 <- df_meteoCO2 %>%
filter(!is.na(windu) & !is.na(windv) & !is.na(ws) & !is.na(wd) & !is.na(t2m) &
!is.na(ssrd) & !is.na(surfacepressure) & !is.na(relative_humidity) &
!is.na(ablh) & !is.na(CO2_dry_corr_cal))
setwd("E:/_stageCO2/codeLila/meteo_marseille_clustering")
# on fait en sorte que le wd soit bon aussi quand on exécute chunk by chunk
if (interactive()) {
setwd(rprojroot::find_rstudio_root_file())
}
getwd()
savefig = TRUE
figpath = "outputs/figures/basicplots_LCP"
saison_colors <- c("DJF" = "deepskyblue3",
"MAM" = "springgreen4",
"JJA" = "gold",
"SON" = "orangered1")
rose_saison <- windRose(df_meteoCO2, type = "saison", paddle = FALSE, border = TRUE,
key.header = "ERA5 Land wind at LCP", key.footer = "Vitesse du vent (m/s)",
breaks = c(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20))
# load packages
library(tidyverse)
library(lubridate)
library(ggplot2)
library(tidyr)
library(openair)
library(dplyr)
library(viridis)
rose_saison <- windRose(df_meteoCO2, type = "saison", paddle = FALSE, border = TRUE,
key.header = "ERA5 Land wind at LCP", key.footer = "Vitesse du vent (m/s)",
breaks = c(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20))
df_meteoCO2 <- readRDS("data/processed/df_meteoCO2_LCP.rds")
# on filtre les valeurs manquantes
df_meteoCO2 <- df_meteoCO2 %>%
filter(!is.na(windu) & !is.na(windv) & !is.na(ws) & !is.na(wd) & !is.na(t2m) &
!is.na(ssrd) & !is.na(surfacepressure) & !is.na(relative_humidity) &
!is.na(ablh) & !is.na(CO2_dry_corr_cal))
rose_saison <- windRose(df_meteoCO2, type = "saison", paddle = FALSE, border = TRUE,
key.header = "ERA5 Land wind at LCP", key.footer = "Vitesse du vent (m/s)",
breaks = c(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20))
# on fait en sorte que le wd soit bon aussi quand on exécute chunk by chunk
if (interactive()) {
setwd(rprojroot::find_rstudio_root_file())
}
# chargement des librairies
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(openair)
library(foehnix)
# paramètres pour l'exécution du code
savefig = TRUE
figpath <- "./outputs/figures/clustering_LCP/"
# chargement des librairies
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(openair)
library(foehnix)
# paramètres pour l'exécution du code
savefig = TRUE
figpath <- "./outputs/figures/clustering_LCP/"
# on fait en sorte que le wd soit bon aussi quand on exécute chunk by chunk
if (interactive()) {
setwd(rprojroot::find_rstudio_root_file())
}
# chargement des librairies
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(openair)
library(foehnix)
# paramètres pour l'exécution du code
savefig = TRUE
figpath <- "./outputs/figures/clustering_LCP/"
#load data
meteoCO2 <- readRDS("./data/processed/df_meteoCO2_LCP.rds")
# on fait en sorte que le wd soit bon aussi quand on exécute chunk by chunk
if (interactive()) {
setwd(rprojroot::find_rstudio_root_file())
}
# chargement des librairies
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(openair)
library(foehnix)
# paramètres pour l'exécution du code
savefig = TRUE
figpath <- "./outputs/figures/clustering_LCP/"
#load data
meteoCO2 <- readRDS("./data/processed/df_meteoCO2_LCP.rds")
#load data
meteoCO2 <- readRDS("./data/processed/df_meteoCO2_LCP.rds")
# on supprime les lignes où on a des na
meteoCO2 <- meteoCO2 %>%
filter(!is.na(t2m_ano) & !is.na(relative_humidity_ano) &
!is.na(surfacepressure_ano) & !is.na(ssrd_ano) &
!is.na(windu) & !is.na(windv) &
!is.na(totalprecipitation) & !is.na(wd) & !is.na(ws) & !is.na(CO2_dry_corr_cal))
#load data
meteoCO2 <- readRDS("./data/processed/df_meteoCO2_LCP.rds")
# on supprime les lignes où on a des na
meteoCO2 <- meteoCO2 %>%
filter(!is.na(t2m) & !is.na(relative_humidity) &
!is.na(surfacepressure) & !is.na(ssrd) &
!is.na(windu) & !is.na(windv) &
!is.na(totalprecipitation) & !is.na(wd) & !is.na(ws) & !is.na(CO2_dry_corr_cal))
#load data
meteoCO2 <- readRDS("./data/processed/df_meteoCO2_LCP.rds")
# on supprime les lignes où on a des na
meteoCO2 <- meteoCO2 %>%
filter(!is.na(t2m) & !is.na(relative_humidity) &
!is.na(surfacepressure) & !is.na(ssrd) &
!is.na(windu) & !is.na(windv) &
!is.na(totalprecipitation) & !is.na(wd) & !is.na(ws) & !is.na(CO2_dry_corr_cal))
# print la date min et la date max
print(paste("Date min:", min(meteoCO2$date)))
print(paste("Date max:", max(meteoCO2$date)))
#load data
meteoCO2 <- readRDS("./data/processed/df_meteoCO2_LCP.rds")
# on supprime les lignes où on a des na
meteoCO2 <- meteoCO2 %>%
filter(!is.na(t2m) & !is.na(relative_humidity) &
!is.na(surfacepressure) & !is.na(ssrd) &
!is.na(windu) & !is.na(windv) &
!is.na(totalprecipitation) & !is.na(wd) & !is.na(ws) & !is.na(CO2_dry_corr_cal))
# dates de début et de fin
print(paste("Date début:", min(meteoCO2$date)))
print(paste("Date fin:", max(meteoCO2$date)))
# nombre de jours où on a au moins une ligne
print(paste("Nombre de jours:", n_distinct(as.Date(meteoCO2$date))))
1700/365
# variables à désaisonnaliser
vars_to_deseasonalize <- c("CO2_dry_corr_cal", "t2m")
# désaisonnalisation
res <- fit_regression_multi(meteoCO2, vars_to_deseasonalize, trend = TRUE)
meteoCO2 <- res$data
coeffs_reg <- res$models
# variables à désaisonnaliser
vars_to_deseasonalize <- c("CO2_dry_corr_cal", "t2m")
# désaisonnalisation
res <- fit_regression_multi(meteoCO2, vars_to_deseasonalize, trend = TRUE)
meteoCO2 <- res$data
coeffs_reg <- res$models
# chargement des functions
source("./R/functions/clustering_functions.R")
# variables à désaisonnaliser
vars_to_deseasonalize <- c("CO2_dry_corr_cal", "t2m")
# désaisonnalisation
res <- fit_regression_multi(meteoCO2, vars_to_deseasonalize, trend = TRUE)
meteoCO2 <- res$data
coeffs_reg <- res$models
# variables à désaisonnaliser
vars_to_deseasonalize <- c("CO2_dry_corr_cal", "t2m")
# ajout de time (temps en années pour la régression)
meteoCO2 <- meteoCO2 %>%
mutate(time = as.numeric(difftime(date, min(date), units = "days")) / 365.25)
# désaisonnalisation
res <- fit_regression_multi(meteoCO2, vars_to_deseasonalize, trend = TRUE)
meteoCO2 <- res$data
coeffs_reg <- res$models
View(meteoCO2)
meteoCO2_DJF <- meteoCO2 %>%
filter(saison == "DJF")
vars_to_mean <- c("CO2_dry_corr_cal", "t2m", "relative_humidity",
"surfacepressure", "ssrd", "windu", "windv", "ablh")
vars_to_sum <- c("totalprecipitation")
meteoCO2_mean <- meteoCO2_DJF %>%
group_by(date) %>%
summarise(across(all_of(vars_to_mean), mean, na.rm = TRUE),
across(all_of(vars_to_sum), sum, na.rm = TRUE)) %>%
ungroup()
vars_to_mean <- c("CO2_dry_corr_cal", "t2m", "relative_humidity",
"surfacepressure", "ssrd", "windu", "windv", "ablh")
vars_to_sum <- c("totalprecipitation")
meteoCO2_mean <- meteoCO2_DJF %>%
group_by(date) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
View(meteoCO2_mean)
vars_to_mean <- c("CO2_dry_corr_cal", "t2m", "relative_humidity",
"surfacepressure", "ssrd", "windu", "windv", "ablh")
vars_to_sum <- c("totalprecipitation")
meteoCO2$day <- as.Date(meteoCO2$date)
meteoCO2_DJF$day <- as.Date(meteoCO2_DJF$date)
meteoCO2_mean <- meteoCO2_DJF %>%
group_by(day) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
View(meteoCO2_mean)
vars_to_mean <- c("CO2_dry_corr_cal", "t2m", "relative_humidity",
"surfacepressure", "ssrd", "windu", "windv", "ablh")
vars_to_sum <- c("totalprecipitation")
meteoCO2$day <- as.Date(meteoCO2$date)
meteoCO2_DJF$day <- as.Date(meteoCO2_DJF$date)
meteoCO2_mean <- meteoCO2 %>%
group_by(day) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
meteoCO2_mean_DJF <- meteoCO2_DJF %>%
group_by(day) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
# matin/soir
meteoCO2_mean_matin <- meteoCO2 %>%
filter(flag_dn == "matin") %>%
group_by(day) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
meteoCO2_mean_soir <- meteoCO2 %>%
filter(flag_dn == "soir") %>%
group_by(day) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
# matin/soir DJF
meteoCO2_mean_matin_DJF <- meteoCO2_DJF %>%
filter(flag_dn == "matin") %>%
group_by(day) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
meteoCO2_mean_soir_DJF <- meteoCO2_DJF %>%
filter(flag_dn == "soir") %>%
group_by(day) %>%
summarise(across(all_of(vars_to_mean), \(x) mean(x, na.rm = TRUE)),
across(all_of(vars_to_sum), \(x) sum(x, na.rm = TRUE))) %>%
ungroup()
rm(meteoCO2, meteoCO2_DJF)
# on centre réduit
meteoCO2_mean_scaled <- meteoCO2_mean %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
# on centre réduit
meteoCO2_mean_scaled <- meteoCO2_mean %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_scaled$day <- meteoCO2_mean$day
meteoCO2_mean_matin_scaled <- meteoCO2_mean_matin %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_matin_scaled$day <- meteoCO2_mean_matin$day
meteoCO2_mean_soir_scaled <- meteoCO2_mean_soir %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_soir_scaled$day <- meteoCO2_mean_soir$day
meteoCO2_mean_DJF_scaled <- meteoCO2_mean_DJF %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_matin_DJF_scaled <- meteoCO2_mean_matin_DJF %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_soir_DJF_scaled <- meteoCO2_mean_soir_DJF %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
# on centre réduit
meteoCO2_mean_scaled <- meteoCO2_mean %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_scaled$day <- meteoCO2_mean$day
meteoCO2_mean_matin_scaled <- meteoCO2_mean_matin %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_matin_scaled$day <- meteoCO2_mean_matin$day
meteoCO2_mean_soir_scaled <- meteoCO2_mean_soir %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_soir_scaled$day <- meteoCO2_mean_soir$day
meteoCO2_mean_DJF_scaled <- meteoCO2_mean_DJF %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_DJF_scaled$day <- meteoCO2_mean_DJF$day
meteoCO2_mean_matin_DJF_scaled <- meteoCO2_mean_matin_DJF %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_matin_DJF_scaled$day <- meteoCO2_mean_matin_DJF$day
meteoCO2_mean_soir_DJF_scaled <- meteoCO2_mean_soir_DJF %>%
select(-day) %>%
scale(center = TRUE, scale = TRUE) %>%
as.data.frame()
meteoCO2_mean_soir_DJF_scaled$day <- meteoCO2_mean_soir_DJF$day
distance_mat <- dist(meteoCO2_mean_matin_DJF_scaled,"euclidian")
hc <- hclust(distance_mat)
distance_mat <- dist(meteoCO2_mean_matin_DJF_scaled,"euclidian")
hc <- hclust(distance_mat)
# Plot les distances auxquelles sont aggrégés les clusters
height_data <- data.frame(
Iteration = 1:length(hc$height),  # Les itérations
Hauteur = hc$height                # Les hauteurs des clusters à chaque itération
)
ggplot(height_data, aes(x = Iteration, y = Hauteur)) +
geom_line(color = "darkslateblue") +  # Trace la ligne
labs(title = "Distance d'aggrégation", x = "Itération", y = "Hauteur") +
theme_minimal()
if (savefig) {
ggsave(file.path(figpath, "dist_complete_CAH_without_PCA_DJF_matin.png"), width = 10, height = 6, bg = "white")
}
b<-cutree(hc, k = 6) # k le nombre de clusters souhaités
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj1 <- as.dendrogram(hc)
ordered_clusters <- b[order.dendrogram(avg_dend_obj1)]
# Colorier les branches du dendrogramme selon les groupes formés par cutree
avg_col_dend1 <- color_branches(avg_dend_obj1, clusters = ordered_clusters)
#suppress labels
avg_col_dend1 <- set_labels(avg_col_dend1, k = 6, h = 20, labels = NA)
#avg_col_dend1 <- color_branches(avg_dend_obj1, k=6, h = 35)
plot(avg_col_dend1, cex.axis = 3, xaxt = "n")
if (savefig) {
png(file.path(figpath, "complete_CAH_without_PCA.png"), width = 4000, height = 3000, res = 300)
plot(avg_col_dend1, cex.axis = 3, xaxt = "n")
dev.off()
}
mean_dayanddn$cluster <- b
rm(b)
distance_mat <- dist(meteoCO2_mean_matin_DJF_scaled,"euclidian")
hc <- hclust(distance_mat)
# Plot les distances auxquelles sont aggrégés les clusters
height_data <- data.frame(
Iteration = 1:length(hc$height),  # Les itérations
Hauteur = hc$height                # Les hauteurs des clusters à chaque itération
)
ggplot(height_data, aes(x = Iteration, y = Hauteur)) +
geom_line(color = "darkslateblue") +  # Trace la ligne
labs(title = "Distance d'aggrégation", x = "Itération", y = "Hauteur") +
theme_minimal()
if (savefig) {
ggsave(file.path(figpath, "dist_complete_CAH_without_PCA_DJF_matin.png"), width = 10, height = 6, bg = "white")
}
b<-cutree(hc, k = 6) # k le nombre de clusters souhaités
suppressPackageStartupMessages(library(dendextend))
avg_dend_obj1 <- as.dendrogram(hc)
ordered_clusters <- b[order.dendrogram(avg_dend_obj1)]
# Colorier les branches du dendrogramme selon les groupes formés par cutree
avg_col_dend1 <- color_branches(avg_dend_obj1, clusters = ordered_clusters)
#suppress labels
avg_col_dend1 <- set_labels(avg_col_dend1, k = 6, h = 20, labels = NA)
#avg_col_dend1 <- color_branches(avg_dend_obj1, k=6, h = 35)
plot(avg_col_dend1, cex.axis = 3, xaxt = "n")
if (savefig) {
png(file.path(figpath1, "complete_CAH_without_PCA.png"), width = 4000, height = 3000, res = 300)
plot(avg_col_dend1, cex.axis = 3, xaxt = "n")
dev.off()
}
meteoCO2_mean_matin_DJF$cluster <- b
rm(b)
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA')
vars <- c("CO2_dry_corr_cal", "t2m", "relative_humidity",
"surfacepressure", "ssrd", "windu", "windv", "ablh")
varnames <- c("CO2 (ppm)", "Température a 2m", "Humidité relative",
"Pression de surface", "Rayonnement solaire", "Vent u", "Vent v", "Hauteur de la couche limite")
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA')
vars <- c("CO2_dry_corr_cal", "t2m", "relative_humidity",
"surfacepressure", "ssrd", "windu", "windv", "ablh")
varnames <- c("CO2 (ppm)", "Température a 2m", "Humidité relative",
"Pression de surface", "Rayonnement solaire", "Vent u", "Vent v", "Hauteur de la couche limite")
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars = vars,
varnames = varnames)
vars <- c("CO2_dry_corr_cal", "t2m", "relative_humidity",
"surfacepressure", "ssrd", "windu", "windv", "ablh")
varnames <- c("CO2 (ppm)", "Température a 2m", "Humidité relative",
"Pression de surface", "Rayonnement solaire", "Vent u", "Vent v", "Hauteur de la couche limite")
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars = vars,
varnames = varnames)
vars_dict <- list(
CO2_dry_corr_cal = "CO2 (ppm)",
t2m = "Température a 2m",
relative_humidity = "Humidité relative",
surfacepressure = "Pression de surface",
ssrd = "Rayonnement solaire",
windu = "Vent u",
windv = "Vent v",
ablh = "Hauteur de la couche limite"
)
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars_dict = vars_dict)
vars_dict <- list(
CO2_dry_corr_cal = "CO2 (ppm)",
t2m = "Température a 2m",
relative_humidity = "Humidité relative",
surfacepressure = "Pression de surface",
ssrd = "Rayonnement solaire",
windu = "Vent u",
windv = "Vent v",
ablh = "Hauteur de la couche limite"
)
ddff <- uv2ddff(meteoCO2_mean_matin_DJF$windu, meteoCO2_mean_matin_DJF$windv)
meteoCO2_mean_matin_DJF$wd <- ddff$wd
meteoCO2_mean_matin_DJF$ws <- ddff$ws
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars_dict = vars_dict)
rlang::last_trace()
vars_dict <- list(
CO2_dry_corr_cal = "CO2 (ppm)",
t2m = "Température a 2m",
relative_humidity = "Humidité relative",
surfacepressure = "Pression de surface",
ssrd = "Rayonnement solaire",
windu = "Vent u",
windv = "Vent v",
ablh = "Hauteur de la couche limite"
)
ddff <- uv2ddff(meteoCO2_mean_matin_DJF$windu, meteoCO2_mean_matin_DJF$windv)
meteoCO2_mean_matin_DJF$wd <- ddff$wd
meteoCO2_mean_matin_DJF$ws <- ddff$ws
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars_dict = vars_dict)
ddff <- uv2ddff(meteoCO2_mean_matin_DJF$windu, meteoCO2_mean_matin_DJF$windv)
meteoCO2_mean_matin_DJF$wd <- ddff$wd
meteoCO2_mean_matin_DJF$ws <- ddff$ws
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars_dict = vars_dict)
vars_dict <- list(
CO2_dry_corr_cal = "CO2 (ppm)",
t2m = "Température a 2m",
relative_humidity = "Humidité relative",
surfacepressure = "Pression de surface",
ssrd = "Rayonnement solaire",
windu = "Vent u",
windv = "Vent v",
ablh = "Hauteur de la couche limite"
)
ddff <- uv2ddff(meteoCO2_mean_matin_DJF$windu, meteoCO2_mean_matin_DJF$windv)
meteoCO2_mean_matin_DJF$wd <- ddff$dd
meteoCO2_mean_matin_DJF$ws <- ddff$ff
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars_dict = vars_dict)
vars_dict <- list(
CO2_dry_corr_cal = "CO2 (ppm)",
t2m = "Température a 2m",
relative_humidity = "Humidité relative",
surfacepressure = "Pression de surface",
ssrd = "Rayonnement solaire",
windu = "Vent u",
windv = "Vent v",
ablh = "Hauteur de la couche limite",
wd = "Direction du vent",
ws = "Vitesse du vent",
)
ddff <- uv2ddff(meteoCO2_mean_matin_DJF$windu, meteoCO2_mean_matin_DJF$windv)
meteoCO2_mean_matin_DJF$wd <- ddff$dd
meteoCO2_mean_matin_DJF$ws <- ddff$ff
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars_dict = vars_dict)
vars_dict <- list(
CO2_dry_corr_cal = "CO2 (ppm)",
t2m = "Température a 2m",
relative_humidity = "Humidité relative",
surfacepressure = "Pression de surface",
ssrd = "Rayonnement solaire",
windu = "Vent u",
windv = "Vent v",
ablh = "Hauteur de la couche limite",
wd = "Direction du vent",
ws = "Vitesse du vent"
)
ddff <- uv2ddff(meteoCO2_mean_matin_DJF$windu, meteoCO2_mean_matin_DJF$windv)
meteoCO2_mean_matin_DJF$wd <- ddff$dd
meteoCO2_mean_matin_DJF$ws <- ddff$ff
plot_clustering_results(meteoCO2_mean_matin_DJF, 'cluster', 'complete_CAH_without_PCA', 'completeCH_withoutPCA', vars_dict = vars_dict)
